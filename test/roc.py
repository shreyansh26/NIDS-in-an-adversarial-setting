dt = OneVsRestClassifier(DecisionTreeClassifier(random_state=42))
dt.fit(X_train_scaled, y_train)
y_pred = dt.predict(X_test_scaled)

fpr_dt, tpr_dt, _ = roc_curve(y_test[:, 0], y_pred[:, 0])
roc_auc_dt = auc(fpr_dt, tpr_dt)
print("Accuracy score: {}".format(accuracy_score(y_test, y_pred)))
print("F1 Score: {}".format(f1_score(y_test, y_pred, average='micro')))
print("AUC score: {}".format(roc_auc_dt))

y_pred_adv = dt.predict(X_adv)
fpr_dt_adv, tpr_dt_adv, _ = roc_curve(y_test[:, 0], y_pred_adv[:, 0])
roc_auc_dt_adv = auc(fpr_dt_adv, tpr_dt_adv)
print("Accuracy score adversarial: {}".format(accuracy_score(y_test, y_pred_adv)))
print("F1 Score adversarial: {}".format(f1_score(y_test, y_pred_adv, average='micro')))
print("AUC score adversarial: {}".format(roc_auc_dt_adv))

plt.figure()
lw = 2
plt.plot(fpr_dt, tpr_dt, color='darkorange', lw=lw, label="ROC Curve (area = %0.2f)" % roc_auc_dt)
plt.plot(fpr_dt_adv, tpr_dt_adv, color='green', lw=lw, label="ROC Curve adv. (area = %0.2f)" % roc_auc_dt_adv)
plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Decision Tree (class=Normal)")
plt.legend(loc="lower right")
plt.savefig('ROC_DT.png', bbox_inches = "tight")